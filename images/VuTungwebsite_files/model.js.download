const model = {}

model.currentUser = undefined
model.listCourses = undefined
model.currentCourse = undefined
model.currentVideo = undefined
model.register = ({ name, email, password, role }) => {

    //console.log(firstName)
    firebase.auth().createUserWithEmailAndPassword(email, password).then((res) => {
        console.log(res)
        firebase.auth().currentUser.sendEmailVerification()
        firebase.auth().currentUser.updateProfile({
            displayName: name
        })
        const user = {
            email,
            role
        }
        model.addUser(user)
            //console.log(firebase.auth().currentUser)
        view.setActiveScreen("loginScreen")
    }).catch((err) => {
        //console.log(err)
        alert(err.message)
    })
}
model.addUser = (user) => {
    firebase.firestore().collection('users').add(user)
}
model.checkRole = async() => {
    const res = await firebase.firestore().collection('users').where('email', '==', model.currentUser.email).get()
    const resDoc = getDataFromDocs(res.docs)
    if (resDoc.length > 0) {
        model.currentUser.role = resDoc[0].role
    } else {
        model.currentUser.role = 'student'
    }
    view.setActiveScreen(model.currentUser.role === 'teacher' ? 'teacherScreen' : 'indexScreen')

}
model.login = ({ email, password }) => {
    firebase.auth().signInWithEmailAndPassword(email, password).then((res) => {
        console.log(res)
        if (!firebase.auth().currentUser.emailVerified) {
            alert("Please verify email")
        } else {
            view.setActiveScreen('indexScreen')
        }
    }).catch((err) => {
        alert(err.message)
    })
}

model.search = async(searchKey) => {
    const res = await firebase.firestore().collection('courses').where('title', '==', searchKey).get()
    model.currentCourse = getDataFromDocs(res.docs)[0]
}
model.loadCourses = async(topic) => {
    console.log(topic)
    const res = await firebase.firestore().collection('courses').where('topic', '==', topic).get()
    model.listCourses = getDataFromDocs(res.docs)
    model.currentCourse = model.listCourses[0]
}


getDataFromDoc = (doc) => {
    let course = doc.data()
    course.id = doc.id
    return course
}

getDataFromDocs = (docs) => {
    return docs.map(getDataFromDoc)
}